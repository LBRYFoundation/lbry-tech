---
import { Code } from "astro/components";
import Collapsible from "./Collapsible.astro";

const {examples, cmd} = Astro.props;

if (!examples) return;

// Treat title and output as metadata and remove from examples
const title = examples.title;
const output = examples.output;
delete examples.title;
delete examples.output;

const options = (Object.keys(examples).map(example=> `.${example}`)).join(', ');

function setExample(example, cmd){
                console.log(example, cmd);
                document.body.classList.toggle(example);
            }

---
    {examples ? (
        <div class="examples">
            <h3>Examples</h3>
            <h4>{title}</h4>
            <div class="buttons">
                {Object.keys(examples).map(example=>(
                    <button data-example={example}>{example}</button>
                ))}
            </div>
            <div class="commands">
                {Object.keys(examples).map(example=>(
                    <div class:list={["example", cmd, example]}>
                        {/* <p>{example}</p> */}
                        <Code lang={"bash"} code={`${examples[example]}`} />
                    </div>
                ))}
            </div>
            {output && (
                <Collapsible>
                    <span slot="head">Output:</span>
                    <Code slot="body" lang={"json"} code={`${output}`} />
                </Collapsible>
            )}
        </div>
        <script define:vars={{examples, cmd}}>
            
            document.querySelectorAll(`.${cmd} button`).forEach(btn=>{
                btn.addEventListener('click', (e)=>{
                    Object.keys(examples).map(example=>{
                        document.body.classList.remove(example);
                    });
                    document.body.classList.add(btn.getAttribute('data-example'));
                })
            })
            
        </script>
    ) : ''}
</div>
<style>

    .examples {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding: 1rem;
        border-radius: 8px;
        border: 3px solid var(--secondary-background);
    }

    .commands {
        display: flex;
        flex-direction: column;
        gap: 25px;
    }

    .example {
        display: none;
    }

    .buttons {
        display: flex;
        gap: 0.75rem;
    }

    button {
        color: var(--primary);
        padding: 0.5em 0.75rem;
        border-radius: 8px;
        border: none;
        background-color: var(--secondary-background);
    }

    body:not(.curl, .lbrynet, .python, .cli) button:first-of-type, body.curl button[data-example=curl], body.lbrynet button[data-example=lbrynet], body.python button[data-example=python], body.cli button[data-example=cli] {
        font-weight: bold;
        color: var(--accent);
        outline: 1px solid var(--accent);
        /* background-color: var(--accent); */
    }
</style>