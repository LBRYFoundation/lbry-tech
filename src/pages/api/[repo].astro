---
import Layout from '../../layouts/Layout.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import APIArguments from '../../components/APIArguments.astro';
import APIExamples from '../../components/APIExamples.astro';
import Collapsible from '../../components/Collapsible.astro';

import * as config from "../../config.js";
import { Code } from 'astro:components';

export function getStaticPaths() {
    
    const paths = Object.keys(config.API_REPOS).map(repo=>{
        return {params: {repo}};
    });

    return paths; 
}

const { repo } = Astro.params;

const tags = (await (await fetch(`https://data.jsdelivr.com/v1/packages/gh/${config.GITHUB_ORG}/${repo}`)).json()).versions;
tags.unshift({version: "master"});

const tag = tags[0];

let docs = (await (await fetch(`https://cdn.jsdelivr.net/gh/${config.GITHUB_ORG}/${repo}@${tag.version}/${config.API_REPOS[repo].api}`)).json());


// Convert lbrycrd docs to the same structure as lbry-sdk
if (repo === 'lbrycrd') {
    const crd = {};
    for (let i in docs) {
        if (!crd[docs[i].namespace]) crd[docs[i].namespace] = {
            doc: docs[i].namespace,
            commands: []
        };
        crd[docs[i].namespace].commands.push(docs[i]);
        console.log(docs[i]);
        
        //docs.main[i].command = docs.main[i].name;
    }
    docs = crd;
}

const headings: Array<object> = [];

// Generate headings
Object.keys(docs).forEach(group=>{
    headings.push({
        slug: group,
        text: group.charAt(0).toUpperCase() + group.substr(1).toLowerCase(),
        depth: 2
    });

    docs[group].commands.forEach(cmd=>{
        headings.push({
            slug: cmd.name,
            text: cmd.name,
            depth: 3
        });
    })
    
});

---


<Layout title={repo}>
    <div class="wrapper">
        <section class="sidebar">
            {(headings && headings.length) ? (
                <aside id="toc">
                    <TableOfContents headings={headings} />
                </aside>
            ) : ''}
        </section>
        
        <!-- <TableOfContents headings={headings} /> -->
        <select>
            {tags.map(tag=>(
                <option>{tag.version}</option>
            ))}
        </select>
        <div class="main">
            <div class="description">
                <h1>{repo} {tag.version}</h1>
                <p>Methods and signatures provided by <a href={`https://github.com/${config.GITHUB_ORG}/${repo}`}>{repo}</a> are documented below. To build, download, or run the daemon, see the project
                    <a href={`https://github.com/${config.GITHUB_ORG}/${repo}/blob/${tag.version}/README.md`}>README</a>.
                </p>
            </div>
            <hr/>
            <div class="commands">
                {Object.keys(docs).map(header=>(
                    <section>
                        <p class="header" id={header}>{header}</p>
                        {docs[header].commands.map(cmd=>(
                            <div class:list={["command", cmd.name]}>
                                <h2 id={cmd.name}>{cmd.name}</h2>
                                <p>{cmd.description}</p>
                                <APIArguments args={cmd.arguments}/>
                                <APIExamples cmd={cmd.name} examples={cmd.examples[0]}/>
                                <Collapsible open>
                                    <span slot="head">Returns:</span>
                                    <Code slot="body" lang={"json"} code={`${cmd.returns || "Not available."}`} class:list={["returns"]} />
                                </Collapsible>
                                </div>
                            <hr/>
                        ))}
                    </section>
                ))}
            </div>
        </div>
    </div>
    <style>
        /* Should we have version selector? */
        select {
            display: none;
        }

        .wrapper {
            padding: 0 1rem;
        }

        .wrapper .main {
            padding-inline-end: var(--sidebar-width);
            transition: 0.3s;
            overflow-x: hidden;
            max-width: 1750px;
            width: calc(100%);
        }

        .description {
            padding: 2rem;
        }

        .description a {
            color: var(--accent);
        }

        .commands {
            display: flex;
            flex-direction: column;
            gap: 25px;
            padding: 1rem;
        }

        .commands .header {
            font-size: 1.75rem;
            font-weight: bold;
        }

        .commands section {
            display: flex;
            flex-direction: column;
            gap: 25px;
        }
        
        .commands section .command {
            display: flex;
            flex-direction: column;
            gap: 1em;
            padding: 0 1rem;
        }

        .wrapper #toc {
            position: fixed;
            width: calc(var(--sidebar-width) - 2rem);
            height: fit-content;
            max-height: calc(100vh - var(--nav-height)*2 - 2rem * 2);
            inset-block: 0;
            inset-inline-end: 2rem;
            margin: calc(2rem + var(--nav-height)) 0;
            // background-color: var(--secondary-background);
            transition: 0.3s;
            z-index: 10;
            overflow-y: auto;
            border-radius: 1em;
            background-color: var(--secondary-background);
        }

        @media only screen and (max-width: 1000px) {
            .wrapper #toc {
                position: relative;
                width: var(--sidebar-width);
                max-height: unset;
                inset-block: unset;
                inset-inline-end: unset;
                margin-top: 0;
                z-index: 1;
                background-color: transparent;
            }

            .wrapper .main {
                padding-inline-end: unset;
            }
        }
        
    </style>

    <style is:inline>
        .commands > section pre {
            padding: 1em;
            border-radius: 9px;
            max-width: 80%;
            background-color: var(--secondary-background) !important;
        }

        .commands > section pre code span {
            white-space: break-spaces;
        }
    </style>
</Layout>